#!/usr/bin/env sh

# Configuration
if [ -z "$STOW_DIR" ]; then
        STOW_DIR="$HOME/stow"
fi
if [ -z "$PKG_NAME" ]; then
	PKG_NAME=$(basename $PWD)
fi
if [ -z "$DEFAULT_TARGET" ]; then
	DEFAULT_TARGET=".local/"
fi

usage() {
	echo "Usage: $(basename $0) <name[:target]> ..."
	exit 1
}

[ $# = 0 ] && usage

PKG_DIR="$STOW_DIR/$PKG_NAME"
if ! [ -d "$PKG_DIR" ]; then
    echo "Creating stow pkg '$PKG_NAME' in '$STOW_DIR'"

    mkdir -p "$PKG_DIR"
fi

while [ "$1" ]; do
	echo "$1" | (IFS=":"; while read name target; do

		if [ -z "$name" ]; then
			echo "Name must be specified"
			break
		fi
		if [ -z "$target" ]; then
			echo "$name: no target specified, '$DEFAULT_TARGET' is assumed"
			target="$DEFAULT_TARGET"
		fi

    if ! [ -e "$name" ]; then
        echo "$name: file doesn't exist"
        break
    fi

		# Examples
		# bin:.local/ == .local/bin -> bin
		# bin:.local/bin == .local/bin -> bin
		# script.sh:.local/bin => .local/bin/script.sh -> script.sh
		# script.sh:.local/bin/newname.sh => .local/bin/newname.sh
		# bin/run.py:.local/bin => .local/bin/run.py -> bin/run.py
		# python/module.py:.local/lib/python3.6/site-packages => .local/lib/python3.6/site-packages -> python/module.py
		# .bin:.local/bin == .local/bin -> .bin

		if expr $target : ".*/$" > /dev/null; then
			target="$target/$(basename $name)"
		fi

    mkdir -p "$(dirname $PKG_DIR/$target)"

		# Stow doesn't want to link packages where there are absolute symlinks inside:
		# % stow spacemacs
		# WARNING! stowing spacemacs would cause conflicts:
		#   * source is an absolute symlink stow/spacemacs/.emacs.d => /home/enki/repos/github.com/syl20bnr/spacemacs/.
		# All operations aborted.
		#
		# Therefore we need the realpath command to make the path relative wrt. the package directory

		ln -sv $(realpath --relative-to="$(dirname $PKG_DIR/$target)" "$PWD/$name") "$PKG_DIR/$target"

	done )
	shift
done
